version: '3.8'

services:
  prometheus:
    image: prom/prometheus:v3.2.1
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.hostname == manager-1"
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alerts_rules.yml:/etc/prometheus/alerts_rules.yml
    ports:
      - "9090:9090"
    networks:
      - mongo-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.listen-address=0.0.0.0:9090'

  grafana:
    image: grafana/grafana:11.5.3
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.hostname == manager-1"
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=bgft015
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_HTTP_ADDR=0.0.0.0
    ports:
      - "3000:3000"
    networks:
      - mongo-network

  node-exporter:
    image: prom/node-exporter:v1.9.0
    deploy:
      mode: replicated
      replicas: 3
      placement:
        constraints:
          - "node.labels.role == db"
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - mongo-network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.52.1
    deploy:
      mode: replicated
      replicas: 3
      placement:
        constraints:
          - "node.labels.role == db"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /:/rootfs:ro
      - /var/lib/docker:/var/lib/docker:ro
    ports:
      - "8090:8080"
    networks:
      - mongo-network

  alertmanager:
    image: prom/alertmanager:v0.28.0
    configs:
      - source: alertmanager_config
        target: /etc/alertmanager/alertmanager.yml
    ports:
      - "9093:9093"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.hostname == manager-1"

    networks:
    - mongo-network

  mongodb-exporter:
    image: bitnami/mongodb-exporter:0.43.1
    deploy:
      mode: replicated
      replicas: 3
      placement:
        constraints:
          - "node.labels.role == db"
      restart_policy:
        condition: on-failure

    environment:
      MONGODB_URI: "mongodb://idrakuser:123idrak123@157.180.31.13:27019/?authSource=admin&directConnection=true"
      MONGODB_EXPORTER_COLLECTOR_TOPOLOGY: "true"  # Collect topology metrics
      MONGODB_EXPORTER_COLLECTOR_OPLOG: "true"     # Collect oplog replication metrics
      MONGODB_EXPORTER_COLLECTOR_INDEXUSAGE: "true"
      MONGODB_EXPORTER_ARGS: "--collect-all"
    networks:
      - mongo-network
    ports:
      - "9216:9216"  # MongoDB Exporter metrics endpoint
    volumes:
      - /etc/localtime:/etc/localtime:ro  # Sync time with host
    command:
      - "--collect-all"
 
configs:
  alertmanager_config:
    file: ./alert_manager.yml

volumes:
  prometheus-data:
    external: true
  grafana-storage:
    external: true

networks:
  mongo-network:
    external: true
